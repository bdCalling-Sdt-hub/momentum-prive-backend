// const getAllCampaigns = async (
//   filters: IICampaignFilters,
//   paginationOptions: IPaginationOptions
// ) => {
//   const { searchTerm, ...filtersData } = filters;
//   const { page, limit, skip, sortBy, sortOrder } =
//     paginationHelpers.calculatePagination(paginationOptions);

//   const andConditions = [];

//   if (searchTerm) {
//     andConditions.push({
//       $or: CampaignSearchAbleFields.map(field => ({
//         [field]: {
//           $regex: searchTerm,
//           $options: 'i',
//         },
//       })),
//     });
//   }

//   if (Object.keys(filtersData).length) {
//     andConditions.push({
//       $and: Object.entries(filtersData).map(([field, value]) => ({
//         [field]: value,
//       })),
//     });
//   }

//   andConditions.push({
//     status: 'active',
//   });

//   const sortConditions: { [key: string]: SortOrder } = {};

//   if (sortBy && sortOrder) {
//     sortConditions[sortBy] = sortOrder;
//   }

//   const whereConditions =
//     andConditions.length > 0 ? { $and: andConditions } : {};

//   const result = await Campaign.find(whereConditions)
//     .populate({
//       path: 'user',
//       populate: {
//         path: 'brand',
//       },
//     })
//     .populate(['influencer', 'category'])
//     .sort(sortConditions)
//     .skip(skip)
//     .limit(limit);

//   const total = await Campaign.countDocuments();
//   return {
//     meta: {
//       page,
//       limit,
//       total,
//     },
//     data: result,
//   };
// };

// const updatedInfluencer = catchAsync(async (req: Request, res: Response) => {
//   const influencerId = req.params.id;
//   const influencerData = req.body;

//   let imagesToDelete = influencerData.imagesToDelete || [];
//   if (typeof imagesToDelete === 'string') {
//     try {
//       imagesToDelete = JSON.parse(imagesToDelete);
//     } catch (error) {
//       imagesToDelete = [imagesToDelete];
//     }
//   }

//   console.log('influencerData', influencerData);

//   const images = getFilePaths(req.files, 'images');

//   const value = {
//     image: images,
//     imagesToDelete: imagesToDelete,
//     ...influencerData,
//   };

//   const result = await InfluencerService.updateInfluencerToDB(
//     influencerId,
//     value
//   );

//   sendResponse(res, {
//     success: true,
//     statusCode: StatusCodes.OK,
//     message: 'Influencer updated successfully',
//     data: result,
//   });
// });
