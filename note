// const getAllCampaigns = async (
//   filters: IICampaignFilters,
//   paginationOptions: IPaginationOptions
// ) => {
//   const { searchTerm, ...filtersData } = filters;
//   const { page, limit, skip, sortBy, sortOrder } =
//     paginationHelpers.calculatePagination(paginationOptions);

//   const andConditions = [];

//   if (searchTerm) {
//     andConditions.push({
//       $or: CampaignSearchAbleFields.map(field => ({
//         [field]: {
//           $regex: searchTerm,
//           $options: 'i',
//         },
//       })),
//     });
//   }

//   if (Object.keys(filtersData).length) {
//     andConditions.push({
//       $and: Object.entries(filtersData).map(([field, value]) => ({
//         [field]: value,
//       })),
//     });
//   }

//   andConditions.push({
//     status: 'active',
//   });

//   const sortConditions: { [key: string]: SortOrder } = {};

//   if (sortBy && sortOrder) {
//     sortConditions[sortBy] = sortOrder;
//   }

//   const whereConditions =
//     andConditions.length > 0 ? { $and: andConditions } : {};

//   const result = await Campaign.find(whereConditions)
//     .populate({
//       path: 'user',
//       populate: {
//         path: 'brand',
//       },
//     })
//     .populate(['influencer', 'category'])
//     .sort(sortConditions)
//     .skip(skip)
//     .limit(limit);

//   const total = await Campaign.countDocuments();
//   return {
//     meta: {
//       page,
//       limit,
//       total,
//     },
//     data: result,
//   };
// };

// const updatedInfluencer = catchAsync(async (req: Request, res: Response) => {
//   const influencerId = req.params.id;
//   const influencerData = req.body;

//   let imagesToDelete = influencerData.imagesToDelete || [];
//   if (typeof imagesToDelete === 'string') {
//     try {
//       imagesToDelete = JSON.parse(imagesToDelete);
//     } catch (error) {
//       imagesToDelete = [imagesToDelete];
//     }
//   }

//   console.log('influencerData', influencerData);

//   const images = getFilePaths(req.files, 'images');

//   const value = {
//     image: images,
//     imagesToDelete: imagesToDelete,
//     ...influencerData,
//   };

//   const result = await InfluencerService.updateInfluencerToDB(
//     influencerId,
//     value
//   );

//   sendResponse(res, {
//     success: true,
//     statusCode: StatusCodes.OK,
//     message: 'Influencer updated successfully',
//     data: result,
//   });
// });

// invite

// const createInviteToDB = async (payload: Partial<IInvite>) => {
//   const isCampaignStatus = await Campaign.findOne({ _id: payload.campaign });

//   const approveStatus = isCampaignStatus?.approvalStatus;

//   const isUsers = isCampaignStatus?.user;

//   const isUser: any = await User.findById(isUsers);

//   payload.user = isUser._id;

//   if (isUser?.title === 'Silver' && isUser.subscription === true) {
//     // Verify that Collaborate documents have a field referencing the user
//     const invitationCount = await Invite.countDocuments({
//       user: isUser._id,
//     });

//     if (invitationCount >= 2) {
//       throw new ApiError(
//         StatusCodes.BAD_REQUEST,
//         'Silver users can only create up to 2 collaborations.'
//       );
//     }
//   }

//   if (approveStatus === 'Rejected') {
//     throw new ApiError(
//       StatusCodes.BAD_REQUEST,
//       'Sorry, your Campaign was Rejected you cannot invite new Influencers'
//     );
//   }

//   if (approveStatus !== 'Approved') {
//     throw new ApiError(
//       StatusCodes.BAD_REQUEST,
//       'Campaign not approved yet, please wait for approval'
//     );
//   }

//   const invitationCount = await Invite.countDocuments({
//     user: isUser._id,
//   });

//   const isCampaign = await Campaign.findOne({ _id: payload.campaign }).populate(
//     'user',
//     'fullName'
//   );

//   // Check if the campaign exists and if user details are populated
//   if (!isCampaign || !isCampaign.user) {
//     throw new Error('Campaign or user not found');
//   }

//   //@ts-ignore
//   const fullName = isCampaign.user.fullName;

//   const result = await Invite.create(payload);

//   const data = {
//     text: `${fullName} invited you to join for events`,
//     receiver: payload.influencer,
//   };
//   await sendNotifications(data);

//   return { result, invitationCount };
// };

////////////////////////////////////////////////////////////////////

// const createInviteToDB = async (payload: Partial<IInvite>) => {
//   const isCampaignStatus = await Campaign.findOne({ _id: payload.campaign });

//   if (!isCampaignStatus) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'Campaign not found');
//   }

//   const approveStatus = isCampaignStatus?.approvalStatus;
//   const isUsers = isCampaignStatus?.user;

//   // Check if isUsers is a valid ID
//   if (!isUsers) {
//     throw new ApiError(
//       StatusCodes.BAD_REQUEST,
//       'No user associated with the campaign'
//     );
//   }

//   const isUser: any = await User.findById(isUsers);

//   // Check if the user exists
//   if (!isUser) {
//     throw new ApiError(StatusCodes.NOT_FOUND, 'User not found');
//   }

//   payload.user = isUser._id;

//   if (isUser.title === 'Silver' && isUser.subscription === true) {
//     const startOfMonth = dayjs().startOf('month').toDate();
//     const endOfMonth = dayjs().endOf('month').toDate();

//     const invitationCount = await Invite.countDocuments({
//       user: isUser._id,
//       createdAt: { $gte: startOfMonth, $lte: endOfMonth },
//     });

//     if (invitationCount >= 2) {
//       throw new ApiError(
//         StatusCodes.BAD_REQUEST,
//         'Silver users can only create up to 2 collaborations.'
//       );
//     }
//   }

//   if (approveStatus === 'Rejected') {
//     throw new ApiError(
//       StatusCodes.BAD_REQUEST,
//       'Sorry, your Campaign was Rejected you cannot invite new Influencers'
//     );
//   }

//   if (approveStatus !== 'Approved') {
//     throw new ApiError(
//       StatusCodes.BAD_REQUEST,
//       'Campaign not approved yet, please wait for approval'
//     );
//   }

//   const isCampaign = await Campaign.findOne({ _id: payload.campaign }).populate(
//     'user',
//     'fullName'
//   );

//   // Check if the campaign exists and if user details are populated
//   if (!isCampaign || !isCampaign.user) {
//     throw new Error('Campaign or user not found');
//   }

//   //@ts-ignore
//   const fullName = isCampaign.user.fullName;

//   const result = await Invite.create(payload);

//   const startOfMonth = dayjs().startOf('month').toDate();
//   const endOfMonth = dayjs().endOf('month').toDate();
//   const invitationCount = await Invite.countDocuments({
//     user: isUser._id,
//     createdAt: { $gte: startOfMonth, $lte: endOfMonth },
//   });

//   // Send notification
//   const data = {
//     text: `${fullName} invited you to join for events`,
//     receiver: payload.influencer,
//   };
//   await sendNotifications(data);

//   return { result, invitationCount };
// };
/////////////////////////////////////////////////

// const createInviteToDB = async (payloads: Partial<IInvite>[]) => {
//   const results = await Invite.insertMany(payloads);

//   const populatedResults = await Invite.populate(results, {
//     path: 'influencer',
//     select: 'fullName',
//   });

//   const firstInfluencerName = (populatedResults[0].influencer as IInfluencer)
//     .fullName;

//   console.log(results);
//   console.log(firstInfluencerName);

//   if (results) {
//     const data = {
//       text: `${firstInfluencerName} invited you to join for events`,
//       receiver: payloads[0].influencer,
//     };
//     await sendNotifications(data);
//   }

//   return populatedResults;
// };

// const getAllInvites = async () => {
//   const result = await Invite.find()
//     .sort({
//       createdAt: -1,
//     })
//     .populate({
//       path: 'campaign',
//       select: 'image name startTime endTime',
//       populate: {
//         path: 'user',
//         select: 'fullName',
//         populate: {
//           path: 'brand',
//           select: 'owner',
//         },
//       },
//     })
//     .populate('influencer');
//   return result;
// };
